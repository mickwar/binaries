#!/bin/bash

# todo: it looks like the summary comes from the first
#   message in a conversation, not sure how to get the
#   latest one

##### begin functions
# converts from UTC (what gmail downloads as) to MDT,
# change the 21600 to X*60*60, where X is the time difference
# e.g. if in the pacific standard time, X=-7, or if in
# japan, X=9
function new_date {
    DATE=$1
    TIME=$2
    NEW_DATE=`date --date="$DATE $TIME" +%s`
    NEW_DATE=$((NEW_DATE + -21600)) # 21600 = 6*60*60 seconds
    echo "`date --date @$NEW_DATE +%A\ %d\ %b\ %Y\ %r`"
    return
    }
# get the color functions i wrote
source ~/bin/color_functions
##### end functions

if [ "$1" == "--help" ]; then
    echo "usage: gmail [USERNAME|FILE] [PASSWORD]"
    echo "    If FILE, then first line is username,"
    echo "    and second line is password."
    echo "    Otherwise, gmail assumes first command"
    echo "    is USERNAME and second is PASSWORD."
    exit 0
fi

# if [ "$1" == "-i" ]; then
    read -e -p "Enter username: " USERNAME
    read -es -p "Enter password: " PASSWORD
    echo ""
# else
#     FILE="/home/mickey/bin/.data/email.txt"
#     read -e -p "Enter username: " -i `sed '1!d' $FILE` USERNAME
#     read -es -p "Enter password: " -i `sed '2!d' $FILE` PASSWORD
#     echo ""
# fi

# get the information for unread messages and put
# them in the file "$GMAIL_PARSE"
GMAIL_PARSE=.gmail_parse.txt
wget --timeout=3 --tries=1 --quiet --secure-protocol=TLSv1 \
    --no-check-certificate \
    --user=$USERNAME --password=$PASSWORD \
    https://mail.google.com/mail/feed/atom \
    --output-document=$GMAIL_PARSE

# add line breaks before every instance of </
sed -i 's/</\n</g' $GMAIL_PARSE

# error: nothing was downloaded, bad username/password
if [ $(wc -l $GMAIL_PARSE | cut -f1 -d' ') -eq "0" ]; then
    echo -e "\n    Invalid username/password.\n" >&2
    exit 1
fi
# shotts says that redirecting error messages to standard
# error ( >&2 ) is the "proper" thing to do

# get the number of unread messages
NUM_MESSAGES=`grep '<fullcount>' $GMAIL_PARSE | cut -f2 -d'>'`

if [ $NUM_MESSAGES -eq "1" ]; then
    echo -e "\n    There is `col_white $NUM_MESSAGES` unread message for $USERNAME."
else
    echo -e "\n    There are `col_white $NUM_MESSAGES` unread messages for $USERNAME."
    if [ $NUM_MESSAGES -eq "0" ]; then
        rm -f $GMAIL_PARSE
        rm -f .gmail_temp.txt
        echo ""
        exit
    fi
fi
# seems like google only lets you download the first 20 unread
# messages, but still gives the correct number.
if [ $NUM_MESSAGES -gt "20" ]; then
    NUM_MESSAGES=20
    echo -e "    (Showing 20)"
fi
echo ""
# remove redundant information (the ending
# of the html tags and others)
# replace </entry> with <endentry> (to get the
# line numbers where a message neds
sed -i 's/<\/entry>/<endentry>/g' $GMAIL_PARSE
# remove every line with </[words]>
sed -i '/<\/[a-z]\+>/d' $GMAIL_PARSE
# remove every instance of <modified> lines
sed -i '/<modified>/d' $GMAIL_PARSE
# remove id, link, author, and email tags
sed -i '/<id>/d' $GMAIL_PARSE
sed -i '/<link rel/d' $GMAIL_PARSE
sed -i '/<author>/d' $GMAIL_PARSE
sed -i '/<email>/d' $GMAIL_PARSE
# remove all empty lines (but shouldn't be any)
sed -i '/^$/d' $GMAIL_PARSE

# replace bad characters
# apostrophe
sed -i "s/&#39;/\'/g" $GMAIL_PARSE
sed -i "s/&quot;/\"/g" $GMAIL_PARSE
sed -i "s/&lt;/\</g" $GMAIL_PARSE
sed -i "s/&gt;/\>/g" $GMAIL_PARSE
sed -i "s/&amp;/\&/g" $GMAIL_PARSE

# replace text for messages with no subject and no message content
sed -i 's/^<title>$/<title>(no subject)/g' $GMAIL_PARSE
sed -i 's/^<summary>$/<summary>(no message)/g' $GMAIL_PARSE
# get the beginning and end line numbers for each message
START_LINES=`grep -n '<entry>' $GMAIL_PARSE | sed 's/:<entry>//g'`
END_LINES=`grep -n '<endentry>' $GMAIL_PARSE | sed 's/:<endentry>//g'`

# get number of columns in terminal
WIDTH=`tput cols`

# begin the loop
CURRENT=1
while [[ $CURRENT -le $NUM_MESSAGES ]]; do
    # extract the start/end line number for message number CURRENT
    ss=$(echo $START_LINES | cut -f"$CURRENT" -d' ')
    ee=$(echo $END_LINES | cut -f"$CURRENT" -d' ')

    # extract every line relating to message CURRENT
    rm -f .gmail_temp.txt
    sed ''$ss','$ee'!d' $GMAIL_PARSE > .gmail_temp.txt

    # get the names (use "email" in place of "name" to get emails)
    # for those involved in the message (can include yourself), and
    # start echoing everything
    FROM=`grep '<name>' .gmail_temp.txt | sed 's/<name>//g' | paste -d, -s | sed 's/\,/\,\ /g'`
    SUBJ="RE: $(grep '<title>' .gmail_temp.txt | sed 's/<title>//g')"
    DATE="$(grep '<issued>' .gmail_temp.txt | sed 's/<issued>//g' | cut -f 1 -d 'T')"
    TIME="$(grep '<issued>' .gmail_temp.txt | sed 's/<issued>//g' | cut -f 2 -d 'T' | sed 's/Z//g')"
    NEW_DATE=`new_date $DATE $TIME`
    DATE=" `col_brown --` `echo $NEW_DATE | cut -c 1-3` `echo $NEW_DATE | cut -f 2-4 -d ' '`"
    TIME=" `col_brown --` `echo $NEW_DATE | cut -f 5-6 -d ' '`"

    # the colors add extra characters, this messes with fmt, need to adjust accordingly

    echo -e "        `col_white $CURRENT.` `col_lgreen $FROM`$DATE $TIME" | fmt -w $((WIDTH+45))
    echo -e "            $SUBJ" |fmt -w $WIDTH
    echo -e "            `col_blue $(grep '<summary>' .gmail_temp.txt | sed 's/<summary>//g')`" | fmt -w $((WIDTH+10))
    echo ""

    # increment and repeat
    CURRENT=$((CURRENT + 1))
done

# clean up
rm -f .gmail_temp.txt
rm -f $GMAIL_PARSE
