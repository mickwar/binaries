#!/bin/bash

DIR=`pwd`
LOCAL_REPO=(
    ~/files/python
    ~/files/data
    ~/files/julia
    ~/files/C
    ~/files/go-game
    ~/files/repos/binaries
    ~/files/repos/homework
    ~/files/repos/latex
    ~/files/repos/lilypond
    ~/files/repos/mwBASE
    ~/files/repos/mwEVT
    ~/files/repos/r-sandbox
    ~/files/repos/ubuntu-config
    )

UPTODATE=()
PULLED=()
PUSHED=()
DIVERGED=()
NOTFOUND=()

for repository in ${LOCAL_REPO[@]}
do
    if [ -d "$repository" ]; then
        ### Go to directory
        cd $repository

        ### do an add and commit (if necessary)
        git add -A .
        if [ `git diff --cached --name-only | wc -l` != 0 ]; then
            # check if the directory is an R package (and update documentation)
            count=`ls -1 *.Rproj 2>/dev/null | wc -l`
            if [ $count != 0 ]; then 
                R --slave --vanilla -e 'devtools::document()'
                git add -A .
            fi 
            git commit -m 'yes'
        fi

        ### 
        UPSTREAM=${1:-'@{u}'}
        LOCAL=$(git rev-parse @)
        REMOTE=$(git rev-parse "$UPSTREAM")
        BASE=$(git merge-base @ "$UPSTREAM")

        if [ $LOCAL = $REMOTE ]; then
            UPTODATE+=($repository)

        elif [ $LOCAL = $BASE ]; then
            echo "Pulling $repository ..."
            PULLED+=($repository)
            git pull
            echo ""

        elif [ $REMOTE = $BASE ]; then
            echo "Pushing $repository ..."
            PUSHED+=($repository)
            ### Repo should already have been files added and committed
            git push
            echo ""

        else
            DIVERGED+=($repository)

        fi

    else
        NOTFOUND+=($repository)
    fi
done

printf "\nRepositories up-to-date:\n"
printf '    %s\n' "${UPTODATE[@]}"

printf "\nRepositories pulled:\n"
printf '    %s\n' "${PULLED[@]}"

printf "\nRepositories pushed:\n"
printf '    %s\n' "${PUSHED[@]}"

printf "\nRepositories diverged:\n"
printf '    %s\n' "${DIVERGED[@]}"

printf "\nRepositories not found on local machine:\n"
printf '    %s\n' "${NOTFOUND[@]}"
printf "\n"

cd $DIR
